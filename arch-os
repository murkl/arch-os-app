#!/usr/bin/env bash

VERSION="1.1.4"

# ///////////////////////////////////////////////////////////////////
# MAIN
# ///////////////////////////////////////////////////////////////////

CACHE_DIR="${HOME}/.cache/arch-os"

main() {

    set -Eeuo pipefail  # Set error handling
    local user_arg="$*" # Get user arguments

    # Check dependencies
    if ! command -v /usr/bin/kitty &>/dev/null; then echo "ERROR: kitty not found" >&2 && exit 1; fi
    if ! command -v /usr/bin/gum &>/dev/null; then echo "ERROR: gum not found" >&2 && exit 1; fi
    if ! command -v /usr/bin/notify-send &>/dev/null; then echo "ERROR: notify-send not found" >&2 && exit 1; fi
    if ! command -v /usr/bin/paru &>/dev/null; then echo "ERROR: paru not found" >&2 && exit 1; fi
    if ! command -v /usr/bin/flatpak &>/dev/null; then echo "ERROR: flatpak not found" >&2 && exit 1; fi

    # Check updates
    if [ -n "$user_arg" ] && [ "$user_arg" = "--check" ]; then
        action_check_updates_available
        exit $? # Exit with result from update check
    fi

    # Download & notify updates (can used from service)
    if [ -n "$user_arg" ] && [ "$user_arg" = "--service" ]; then
        action_preload_updates || exit 1
        action_check_updates_available --notify
        exit $?
    fi

    # Check if executed in kitty, otherwise start with kitty
    [ "$TERM" != "xterm-kitty" ] && kitty "$0" "$@" && exit 0

    trap 'trap_error ${FUNCNAME} ${LINENO}' ERR # Set error trap
    trap 'trap_exit $?' EXIT                    # Set exit trap

    if [ -n "$user_arg" ]; then # Handle arg action
        # Remove trailing dashes from arg
        print_header && user_arg=${1#"-"} && user_arg=${user_arg#"-"}
        case "$user_arg" in # Execute action
        list) action_list_updates ;;
        upgrade) action_upgrade_system ;;
        orphans) action_remove_orphans ;;
        reset) action_reset ;;
        help) print_help ;;
        *) print_help && echo && print_fail "Option '${*}' not available" && exit 1 ;;
        esac
        exit $? # Exit !!!
    fi

    while (true); do
        print_header && local user_input options
        options=("List Updates" "Upgrade System" "Remove Orphans" "Reset Keyring" "Open Help" "Quit")
        user_input=$(gum_choose "${options[@]}") || exit 130
        case "$user_input" in # Execute action
        'List Updates') action_list_updates ;;
        'Upgrade System') action_upgrade_system ;;
        'Remove Orphans') action_remove_orphans ;;
        'Reset Keyring') action_reset ;;
        'Open Help') print_help ;;
        'Quit') exit 130 ;;
        *) print_fail "Option '${user_input}' not available" && exit 1 ;;
        esac
        gum_confirm --affirmative "< Back" --negative '' ''
    done
}

# ///////////////////////////////////////////////////////////////////
# TRAPS
# ///////////////////////////////////////////////////////////////////

trap_exit() { [ $? != 130 ] && gum_confirm --affirmative 'Exit' --negative '' ''; }
trap_error() { print_fail "${BASH_COMMAND} failed ($?) in function '${1}' (line ${2})"; }

# ///////////////////////////////////////////////////////////////////
# ACTIONS
# ///////////////////////////////////////////////////////////////////

action_preload_updates() {
    checkupdates -d || return 1
}

action_check_updates_available() {
    local update_available="false"
    checkupdates && update_available="true"
    paru -Qua && update_available="true"
    [ "$update_available" = "true" ] && [ "${1-}" = "--notify" ] && notify "Updates available"
    [ "$update_available" = "true" ] && return 0
    [ "$update_available" = "false" ] && return 1
}

action_list_updates() { # List package updates
    print_title "List Package Updates"
    ! gum_spin --title 'Checking updates...' -- bash -c "checkupdates; paru -Qua; wait; exit 0" && print_warn "Canceled." && return 0 # Preload and return if user press ctrl + c
    action_check_updates_available || print_info "Your system is up to date."
    return 0
}

action_upgrade_system() { # Update packages
    print_title "Upgrade System Packages"
    paru -Syu --skipreview
    echo && print_info "Upgrade successful."
    return 0
}

action_remove_orphans() { # Remove orphaned packages
    print_title "Remove Orphans"
    # shellcheck disable=SC2046
    paru -Qtdq &>/dev/null && paru -Rns --noconfirm $(paru -Qtdq) 2>/dev/null # Remove orphans
    # shellcheck disable=SC2046
    paru -Rsu --noconfirm $(paru -Qqd) 2>/dev/null # Remove more orphans
    flatpak uninstall -y --unused                  # Remove unused flatpaks
    echo && print_info "Done."
    return 0
}

action_reset() { # Keyring reset (if update failed, try to reset & reinit keyring)
    print_title "Reset Arch Keyring"
    ! gum_confirm "Are you sure?" && print_warn "Canceled." && return 0
    # Keyring reset
    sudo rm -rf /etc/pacman.d/gnupg
    sudo pacman-key --init
    sudo pacman-key --populate
    # Update Arch keyring & system
    paru -Sy --noconfirm archlinux-keyring && paru -Su --skipreview
    echo && print_info "Done."
    return 0
}

# ///////////////////////////////////////////////////////////////////
# PRINT
# ///////////////////////////////////////////////////////////////////

# https://github.com/muesli/termenv?tab=readme-ov-file#color-chart
COLOR_WHITE=251
COLOR_GREEN=42
COLOR_PURPLE=212
COLOR_YELLOW=221
COLOR_RED=9

print_header() {
    local header_logo header_title header_container
    header_logo='
 █████  ██████   ██████ ██   ██      ██████  ███████ 
██   ██ ██   ██ ██      ██   ██     ██    ██ ██      
███████ ██████  ██      ███████     ██    ██ ███████ 
██   ██ ██   ██ ██      ██   ██     ██    ██      ██ 
██   ██ ██   ██  ██████ ██   ██      ██████  ███████
    ' && header_logo=$(gum_purple "$header_logo")
    header_title="${VERSION}" && header_title=$(gum_white --bold "$header_title")
    header_container=$(gum_join --vertical "$header_logo" "$header_title")
    clear && gum_style --width 89 --align center --margin '0 0' "$header_container" && echo
}

print_help() {
    print_title "Commands"
    gum_white 'arch-os --help     Open help page'
    gum_white 'arch-os --list     List package updates'
    gum_white 'arch-os --upgrade  Execute system upgrade'
    gum_white 'arch-os --orphans  Remove orphaned packages'
    gum_white 'arch-os --reset    Reset keyring'
    echo && print_title "Non interactive"
    gum_white 'arch-os --check    Check and print package updates'
    gum_white 'arch-os --service  Download and notify new updates'
}

gum() { /usr/bin/gum "$@"; }

gum_space() { echo '               '; } # Spaces till header
gum_white() { gum_style --foreground "$COLOR_WHITE" "${@}"; }
gum_green() { gum_style --foreground "$COLOR_GREEN" "${@}"; }
gum_purple() { gum_style --foreground "$COLOR_PURPLE" "${@}"; }
gum_yellow() { gum_style --foreground "$COLOR_YELLOW" "${@}"; }
gum_red() { gum_style --foreground "$COLOR_RED" "${@}"; }

gum_choose() { gum choose --cursor "$(gum_space) • " "${@}"; }
gum_confirm() { gum confirm "$@"; }
gum_style() { gum style "${@}"; }
gum_join() { gum join "${@}"; }
gum_spin() { gum spin --spinner dot "${@}"; }

print_title() { gum_purple --bold "${*}" && echo; }
print_info() { gum_green "${*}"; }
print_warn() { gum_yellow "${*}"; }
print_fail() { gum_red --bold "${*}"; }

notify() { notify-send --app-name "Arch OS" -i "${WORKING_DIR}/docs/logo.svg" "Arch OS" "$@"; }

# ///////////////////////////////////////////////////////////////////
# KITTY
# ///////////////////////////////////////////////////////////////////

kitty() {
    mkdir -p "$CACHE_DIR" && echo "$KITTY_CONF" >"${CACHE_DIR}/kitty.conf"
    /usr/bin/kitty --detach --class "arch-os" --name "Arch OS" -c "${CACHE_DIR}/kitty.conf" "$@"
}

# https://sw.kovidgoyal.net/kitty/conf/
KITTY_CONF='
hide_window_decorations yes
remember_window_size false
initial_window_width 800
initial_window_height 600
placement_strategy center
window_padding_width 32
font_family Fira Code Nerd Font
font_size 10.0
active_tab_font_style bold
inactive_tab_font_style normal
foreground              #D8DEE9
background              #2E3440
selection_foreground    #3B4252
selection_background    #EBCB8B
active_tab_foreground   #2E3440
active_tab_background   #A3BE8C
inactive_tab_foreground #2E3440
inactive_tab_background #4C566A
cursor                  #D8DEE9
url_color               #81A1C1
color0                  #3B4252
color8                  #4C566A
color1                  #BF616A
color9                  #BF616A
color2                  #A3BE8C
color10                 #A3BE8C
color3                  #EBCB8B
color11                 #EBCB8B
color4                  #81A1C1
color12                 #81A1C1
color5                  #B48EAD
color13                 #B48EAD
color6                  #88C0D0
color14                 #88C0D0
color7                  #E5E9F0
color15                 #E5E9F0
'

# ///////////////////////////////////////////////////////////////////
# START SCRIPT
# ///////////////////////////////////////////////////////////////////

# Locating working dir
WORKING_SOURCE=${BASH_SOURCE[0]}
while [ -L "$WORKING_SOURCE" ]; do
    WORKING_DIR=$(cd -P "$(dirname "$WORKING_SOURCE")" >/dev/null 2>&1 && pwd)
    WORKING_SOURCE=$(readlink "$WORKING_SOURCE")
    [[ $WORKING_SOURCE != /* ]] && WORKING_SOURCE=$WORKING_DIR/$WORKING_SOURCE
done
WORKING_DIR=$(cd -P "$(dirname "$WORKING_SOURCE")" >/dev/null 2>&1 && pwd)

main "$@" # Start main function
