#!/usr/bin/env bash
# shellcheck disable=SC1090
set -Eeo pipefail # Set script error handling

# ///////////////////////////////////////////////////////////////////
#                         ARCH OS MANAGER
#                - Arch Linux Helper Script TUI -
# ///////////////////////////////////////////////////////////////////

# VERSION
VERSION="1.5.4"

# HOME
ARCH_OS_HOME="${HOME}/.arch-os"
ARCH_OS_CONF="${ARCH_OS_HOME}/arch-os.conf"
KITTY_CONF="${ARCH_OS_HOME}/kitty.conf"
PACKAGES_DB="${ARCH_OS_HOME}/packages.db"
NEWS_DB="${ARCH_OS_HOME}/news.db"

# COLORS
# https://github.com/muesli/termenv?tab=readme-ov-file#color-chart
COLOR_WHITE=7
COLOR_GREEN=2
COLOR_PURPLE=212
COLOR_YELLOW=3
COLOR_RED=1

# ///////////////////////////////////////////////////////////////////
# TRAPS
# ///////////////////////////////////////////////////////////////////

# Return Codes:
# 0   = success (default)
# 1   = fatal (uncatched)
# 2   = error (catched)
# 3   = exit (user)
# 130 = exit (user)

trap_exit() {
    rm -f "${ARCH_OS_HOME}/.mirrorlist.tmp"
    [ "$1" != "3" ] && [ "$1" != "130" ] && gum_confirm --affirmative 'Quit' --negative '' ''
    clear && return "$1"
}

trap_error() {
    [ "$1" != "2" ] && [ "$1" != "3" ] && [ "$1" != "130" ] && gum_fail "${BASH_COMMAND} failed ($1) in function '${2}' (line ${3})"
    return "$1"
}

# ///////////////////////////////////////////////////////////////////
# MAIN
# ///////////////////////////////////////////////////////////////////

main() {

    # Local vars
    local user_input options selected_action skip_confirm first_run

    # Check dependencies
    if ! command -v /usr/bin/kitty &>/dev/null; then echo "ERROR: kitty not found. Install with: sudo pacman -S kitty" >&2 && exit 1; fi
    if ! command -v /usr/bin/gum &>/dev/null; then echo "ERROR: gum not found. Install with: sudo pacman -S gum" >&2 && exit 1; fi
    if ! command -v /usr/bin/checkupdates &>/dev/null; then echo "ERROR: checkupdates not found. Install with: sudo pacman -S pacman-contrib" >&2 && exit 1; fi
    if ! command -v /usr/bin/notify-send &>/dev/null; then echo "ERROR: notify-send not found. Install with: sudo pacman -S libnotify" >&2 && exit 1; fi

    # Create & source properties
    init_properties

    # Check and start kitty
    if [ "$1" = '--kitty' ] || [ "$1" = '-k' ]; then
        shift # Shift argument to next
        # Start kitty if not already present
        if [ "$TERM" != "xterm-kitty" ]; then
            kitty "$SELF" "$@" # Open script in kitty instance
            exit 0
        fi
    fi

    # Check arguments
    if [ $# -gt 1 ]; then
        print_header && action_help && echo && gum_fail "Max. 1 argument supported!"
        gum_confirm --affirmative "Quit" --negative '' ''
        clear && exit 2
    fi

    # If 'check' action
    if [ "$1" = "check" ]; then
        action_check_updates_available
        exit $?
    fi

    # If 'notify' action
    if [ "$1" = "notify" ]; then
        local update_result update_count update_txt
        update_result="$(action_check_updates_available)"
        update_count=$(echo "$update_result" | wc -l)
        if [ "$update_count" -gt 0 ]; then
            [ "$update_count" = 1 ] && update_txt="${update_count} new Update available"
            [ "$update_count" -gt 1 ] && update_txt="${update_count} new Updates available"
            notify-send --app-name "Arch OS Manager" -i "${WORKING_DIR}/docs/logo.svg" "System Upgrade" "$update_txt"
            echo "$update_result"
        fi
        exit 0
    fi

    # Set Traps
    trap 'trap_error $? ${FUNCNAME} ${LINENO}' ERR # Set error trap
    trap 'trap_exit $?' EXIT                       # Set exit trap

    # Handle user action
    selected_action="$1"

    # Init
    print_header
    [ -n "$NEWS_QUANTITY" ] && [ "$NEWS_QUANTITY" -gt 0 ] && ! sync_news_db && gum_fail "Synchronize News failed!"
    [ ! -f "$PACKAGES_DB" ] && ! sync_package_db && gum_fail "Synchronize Package Database failed!"

    # Show menu or execute user action
    first_run="true"
    while (true); do

        [ "$first_run" = "false" ] && print_header # Print header (except first run)

        # Show menu if user action is NOT set
        if [ -z "$selected_action" ]; then
            options=("Search Package" "Fetch Updates" "Upgrade System" "Remove Orphans" "Merge Configurations" "Refresh Mirrorlist" "Downgrade Packages" "Reset Pacman" "System Info" "Settings" "Help" "Quit")
            user_input=$(gum_choose --height=15 --selected="$user_input" "${options[@]}") || exit 130
            case "$user_input" in # Set user action to selected action
            'Search Package') selected_action='search' ;;
            'Fetch Updates') selected_action='fetch' ;;
            'Upgrade System') selected_action='upgrade' ;;
            'Remove Orphans') selected_action='orphans' ;;
            'Merge Configurations') selected_action='merge' ;;
            'Refresh Mirrorlist') selected_action='refresh' ;;
            'Downgrade Packages') selected_action='downgrade' ;;
            'Reset Pacman') selected_action='reset' ;;
            'System Info') selected_action='system' ;;
            'Settings') selected_action='settings' ;;
            'Help') selected_action='help' ;;
            'Quit') exit 3 ;;
            *) action_help && echo && gum_fail "Action '${user_input}' not available" && exit 2 ;;
            esac
        fi

        # Execute action
        skip_confirm="false"
        case "$selected_action" in # Execute action
        'search') action_search || { [ "$?" = "3" ] && skip_confirm="true"; } ;;
        'fetch') action_fetch || { [ "$?" = "3" ] && skip_confirm="true"; } ;;
        'upgrade') action_upgrade || { [ "$?" = "3" ] && skip_confirm="true"; } ;;
        'orphans') action_orphans || { [ "$?" = "3" ] && skip_confirm="true"; } ;;
        'merge') action_merge || { [ "$?" = "3" ] && skip_confirm="true"; } ;;
        'refresh') action_refresh || { [ "$?" = "3" ] && skip_confirm="true"; } ;;
        'downgrade') action_downgrade || { [ "$?" = "3" ] && skip_confirm="true"; } ;;
        'reset') action_reset || { [ "$?" = "3" ] && skip_confirm="true"; } ;;
        'system') action_system_info || { [ "$?" = "3" ] && skip_confirm="true"; } ;;
        'settings') action_settings || { [ "$?" = "3" ] && skip_confirm="true"; } ;;
        'help') action_help || { [ "$?" = "3" ] && skip_confirm="true"; } ;;
        *) action_help && echo && gum_fail "Action '${selected_action}' not available" && exit 2 ;;
        esac

        # Cleanup run
        unset selected_action # Reset selected action
        first_run="false"     # Set first run
        [ "$skip_confirm" = "true" ] && [ -n "$1" ] && exit 3
        [ "$skip_confirm" = "true" ] && continue
        [ -n "$1" ] && gum_confirm --affirmative "Quit" --negative '' '' && exit 3
        ! gum_confirm --affirmative "< Back" --negative 'Quit' '' && exit 3
    done
}

# ///////////////////////////////////////////////////////////////////
# PROPERTIES
# ///////////////////////////////////////////////////////////////////

init_properties() {

    # Init properties
    mkdir -p "$ARCH_OS_HOME"
    touch "$ARCH_OS_CONF"
    source "$ARCH_OS_CONF"

    # Set default properties
    [ -z "$AUTOSTART_NOTIFY" ] && AUTOSTART_NOTIFY="true"
    [ -z "$AUTOSTART_DELAY" ] && AUTOSTART_DELAY="30"
    [ -z "$AUR_SUPPORT" ] && AUR_SUPPORT="true"
    [ -z "$AUR_REVIEW" ] && AUR_REVIEW="false"
    [ -z "$ARCH_UPGRADE_CONFIRM" ] && ARCH_UPGRADE_CONFIRM="true"
    [ -z "$FLATPAK_SUPPORT" ] && FLATPAK_SUPPORT="true"
    [ -z "$FLATPAK_UPGRADE_CONFIRM" ] && FLATPAK_UPGRADE_CONFIRM="false"
    [ -z "$NEWS_QUANTITY" ] && NEWS_QUANTITY="3"
    [ -z "$NEWS_SHOW_URL" ] && NEWS_SHOW_URL="true"
    [ -z "$ORPHANS_CONFIRM" ] && ORPHANS_CONFIRM="false"
    [ -z "$ORPHANS_SHOW_INFO" ] && ORPHANS_SHOW_INFO="true"
    [ -z "$PACDIFF_SHOW_INFO" ] && PACDIFF_SHOW_INFO="true"
    [ -z "$FILTER_RESULT_SIZE" ] && FILTER_RESULT_SIZE="20"
    [ -z "$PACKAGE_INFO_WIDTH" ] && PACKAGE_INFO_WIDTH="80"

    # Validate properties
    [ "$AUTOSTART_DELAY" -gt 500 ] && AUTOSTART_DELAY="500"       # Set to max 500
    [ "$AUTOSTART_DELAY" -lt 10 ] && AUTOSTART_DELAY="10"         # Set to min 10
    [ "$NEWS_QUANTITY" -gt 10 ] && NEWS_QUANTITY="10"             # Set to max 10
    [ "$NEWS_QUANTITY" -lt 0 ] && NEWS_QUANTITY="0"               # Set to min 0
    [ "$FILTER_RESULT_SIZE" -gt 50 ] && FILTER_RESULT_SIZE="50"   # Set to max 50
    [ "$FILTER_RESULT_SIZE" -lt 1 ] && FILTER_RESULT_SIZE="1"     # Set to min 1
    [ "$PACKAGE_INFO_WIDTH" -gt 500 ] && PACKAGE_INFO_WIDTH="500" # Set to max 500
    [ "$PACKAGE_INFO_WIDTH" -lt 20 ] && PACKAGE_INFO_WIDTH="20"   # Set to min 20

    # Check binaries
    [ "$AUR_SUPPORT" = "true" ] && ! command -v /usr/bin/paru &>/dev/null && gum_warn "AUR_SUPPORT was disabled (/usr/bin/paru not found)" && AUR_SUPPORT="false"
    [ "$FLATPAK_SUPPORT" = "true" ] && ! command -v /usr/bin/flatpak &>/dev/null && gum_warn "FLATPAK_SUPPORT was disabled (/usr/bin/flatpak not found)" && FLATPAK_SUPPORT="false"

    # Toggle settings
    if [ "$AUTOSTART_NOTIFY" = "true" ]; then
        mkdir -p "${HOME}/.config/autostart"
        {
            echo "[Desktop Entry]"
            echo "Type=Application"
            echo "Name=Arch OS Manager"
            echo "Icon=${WORKING_DIR}/docs/logo.svg"
            echo "Exec=bash -c 'sleep ${AUTOSTART_DELAY} && ${SELF} notify'"
        } >"${HOME}/.config/autostart/arch-os.desktop"
    else
        rm -f "${HOME}/.config/autostart/arch-os.desktop"
    fi

    { # Write properties
        echo "AUTOSTART_NOTIFY=${AUTOSTART_NOTIFY}"
        echo "AUTOSTART_DELAY=${AUTOSTART_DELAY}"
        echo "AUR_SUPPORT=${AUR_SUPPORT}"
        echo "AUR_REVIEW=${AUR_REVIEW}"
        echo "ARCH_UPGRADE_CONFIRM=${ARCH_UPGRADE_CONFIRM}"
        echo "FLATPAK_SUPPORT=${FLATPAK_SUPPORT}"
        echo "FLATPAK_UPGRADE_CONFIRM=${FLATPAK_UPGRADE_CONFIRM}"
        echo "NEWS_QUANTITY=${NEWS_QUANTITY}"
        echo "NEWS_SHOW_URL=${NEWS_SHOW_URL}"
        echo "ORPHANS_CONFIRM=${ORPHANS_CONFIRM}"
        echo "ORPHANS_SHOW_INFO=${ORPHANS_SHOW_INFO}"
        echo "PACDIFF_SHOW_INFO=${PACDIFF_SHOW_INFO}"
        echo "FILTER_RESULT_SIZE=${FILTER_RESULT_SIZE}"
        echo "PACKAGE_INFO_WIDTH=${PACKAGE_INFO_WIDTH}"
    } >"$ARCH_OS_CONF"

    # Source again
    source "$ARCH_OS_CONF"
}

# ///////////////////////////////////////////////////////////////////
# ACTIONS
# ///////////////////////////////////////////////////////////////////

action_help() {
    gum_white --bold 'GitHub: https://github.com/murkl/arch-os-manager' && echo
    gum_title 'App'
    gum_white 'arch-os [--kitty | -k]              Open main menu'
    gum_white 'arch-os [--kitty | -k] help         Open help page'
    gum_white 'arch-os [--kitty | -k] settings     Edit properties'
    echo && gum_title 'Actions'
    gum_white 'arch-os [--kitty | -k] check        Print package updates like checkupdates (pacman, aur, flatpak)'
    gum_white 'arch-os [--kitty | -k] notify       Notify on new package updates (pacman, aur, flatpak)'
    gum_white 'arch-os [--kitty | -k] search       Search & manage package (pacman, aur)'
    gum_white 'arch-os [--kitty | -k] fetch        Fetch package updates (news, pacdiff, pacman, aur, flatpak)'
    gum_white 'arch-os [--kitty | -k] upgrade      System upgrade (news, pacdiff, pacman, aur, flatpak)'
    gum_white 'arch-os [--kitty | -k] orphans      Remove orphaned packages (pacman, aur, flatpak)'
    gum_white 'arch-os [--kitty | -k] merge        Merge updated configurations (using pacdiff and meld)'
    gum_white 'arch-os [--kitty | -k] refresh      Refresh pacman mirrorlist (using preconfigured reflector)'
    gum_white 'arch-os [--kitty | -k] downgrade    Downgrade packages (pacman only)'
    gum_white 'arch-os [--kitty | -k] reset        Reset pacman (refresh pacman keyring)'
    gum_white 'arch-os [--kitty | -k] system       System info (system & services logging)'
}

# -------------------------------------------------------------------

action_settings() { # Settings
    gum_title "Edit Properties"
    local property_count && property_count=$(wc -l <"${ARCH_OS_CONF}") # Count properties by line
    # Open editor with count of properties + 2
    # BUG: gum write does not accept height greater than 7
    if gum_write --height="$((property_count + 2))" --value="$(<"$ARCH_OS_CONF")" >"${ARCH_OS_CONF}.new"; then
        # If success: save/move file and re-init properties
        mv "${ARCH_OS_CONF}.new" "${ARCH_OS_CONF}" && init_properties
        ! sync_package_db && gum_fail "Synchronize Package Database failed!"
        gum_info "Saved: ${ARCH_OS_CONF}" && return 0
    else
        rm -f "${ARCH_OS_CONF}.new" # Remove tmp properties
        gum_warn "Canceled" && return 2
    fi
}

# -------------------------------------------------------------------

action_system_info() { # System Info Logs
    gum_title "System Error Logs"
    journalctl -p 3 -b --quiet --no-pager
    echo && gum_title "Service Error Logs"
    systemctl --failed
    return 0
}

# -------------------------------------------------------------------

action_check_updates_available() { # Check & print package updates
    local update_available="false"
    checkupdates && update_available="true"
    [ "$AUR_SUPPORT" = 'true' ] && package_manager -Qua && update_available="true"
    if [ "$FLATPAK_SUPPORT" = "true" ]; then
        # Fetch flatpak updates
        local flatpak_updates && flatpak_updates=$(LANG=en_US.UTF-8 flatpak remote-ls --updates --columns=application,installed-size,download-size,version,branch)
        # If result is not null set update available
        [ -n "$flatpak_updates" ] && update_available="true"
        # Format output and use tput if text decoration is not supported (b=big, g=green, r=reset) (regarding to checkupdates format)
        [ -n "$flatpak_updates" ] && echo "$flatpak_updates" | awk -v b="$(tput bold 2>/dev/null)" -v g="$(tput setaf 2 2>/dev/null)" -v r="$(tput sgr0 2>/dev/null)" '{printf "%s%s%s %s%s%s%s -> %s%s%s%s\n", b, $1, r, b, g, $4, r, b, g, ($5 == "" ? "latest" : $5), r}'
    fi
    [ "$update_available" = "false" ] && return 1
    return 0
}

# -------------------------------------------------------------------

action_search() { # Manage packages
    local pkg_name pkg_info_remote pkg_info_local pkg_is_aur pkg_is_installed
    while (true); do
        gum_title "Package Information"
        # If pkg name is null (first run) show search promt
        [ -z "$pkg_name" ] && ! pkg_name=$(gum_filter --limit 1 --height "$FILTER_RESULT_SIZE" --placeholder "Search package..." <"$PACKAGES_DB") && return 3

        # Fetch general package infos
        pkg_info_remote="$(LANG=en_US.UTF-8 package_manager -Si "$pkg_name" 2>/dev/null)" # Uninstalled
        pkg_is_aur="false" && [ "$(print_package_info "$pkg_info_remote" "Repository")" = "aur" ] && pkg_is_aur="true"
        pkg_is_installed="false" && pacman -Q "$pkg_name" &>/dev/null && pkg_is_installed="true"

        # Get installed package info
        if [ "$pkg_is_installed" = "true" ]; then
            pkg_info_local="$(LANG=en_US.UTF-8 package_manager -Qi "$pkg_name" 2>/dev/null)" # Installed
        fi

        # Print general package info
        echo # Print new line
        gum_white --bold "$(print_filled_spaces "Name:") ${pkg_name}"
        gum_white "$(print_filled_spaces "Repository:") $(print_package_info "$pkg_info_remote" "Repository")"
        gum_white "$(print_filled_spaces "Dependencies:") $(print_package_info "$pkg_info_remote" "Depends On" | wc -w)"
        gum_white "$(print_filled_spaces "Version:") $(print_package_info "$pkg_info_remote" "Version")"
        gum_white "$(print_filled_spaces "Description:") $(print_package_info "$pkg_info_remote" "Description")"

        # Repo Info
        if [ "$pkg_is_aur" = "true" ]; then # AUR package info
            gum_white "$(print_filled_spaces "AUR URL:") $(print_package_info "$pkg_info_remote" "AUR URL")"
            gum_white "$(print_filled_spaces "AUR Maintainer:") $(print_package_info "$pkg_info_remote" "Maintainer")"
            gum_white "$(print_filled_spaces "AUR Votes:") $(print_package_info "$pkg_info_remote" "Votes")"
            gum_white "$(print_filled_spaces "AUR Popularity:") $(print_package_info "$pkg_info_remote" "Popularity")"
            gum_white "$(print_filled_spaces "AUR Modified:") $(print_package_info "$pkg_info_remote" "Last Modified" | date -f - "+%Y-%m-%d %H:%M")"
        else # Non AUR package info
            gum_white "$(print_filled_spaces "Package URL:") $(print_package_info "$pkg_info_remote" "URL")"
            gum_white "$(print_filled_spaces "Package Date:") $(print_package_info "$pkg_info_remote" "Build Date" | date -f - "+%Y-%m-%d %H:%M")"
        fi

        # Installed/Not installed package info
        if [ "$pkg_is_installed" = "true" ]; then # Installed package info
            gum_white "$(print_filled_spaces "Install Date:") $(print_package_info "$pkg_info_local" "Install Date" | date -f - "+%Y-%m-%d %H:%M")"
            gum_white "$(print_filled_spaces "Install Version:") $(print_package_info "$pkg_info_local" "Version")"
            gum_white "$(print_filled_spaces "Install Reason:") $(print_package_info "$pkg_info_local" "Install Reason")"
            gum_green --bold "$(print_filled_spaces "Installed:") yes"
        else # Not installed package info
            gum_yellow --bold "$(print_filled_spaces "Installed:") no"
        fi

        # Show package options menu
        echo && gum_title "Options"
        local options=()
        local user_input=''
        # Dynamic package entries
        [ "$pkg_is_aur" = "true" ] && options+=("Show PKGBUILD")
        [ "$pkg_is_installed" = "false" ] && options+=("Install")
        [ "$pkg_is_installed" = "true" ] && options+=("Remove")
        # Show downgrade entry if package is installed and not from AUR
        command -v /usr/bin/downgrade &>/dev/null && [ "$pkg_is_installed" = "true" ] && [ "$pkg_is_aur" = "false" ] && options+=("Downgrade")
        options+=("Exit")
        # Show menu
        user_input=$(gum_choose --height=6 "${options[@]}") || return 3
        case "$user_input" in # Set user action to selected action
        'Install')
            gum_info "Install Package: ${pkg_name}"
            local paru_args=() && [ "$AUR_SUPPORT" = "true" ] && [ "$AUR_REVIEW" = "false" ] && paru_args+=('--skipreview')
            ! sudo_package_manager -Sq --disable-download-timeout "${paru_args[@]}" "$pkg_name" && gum_fail "Installing ${pkg_name} failed" && return 2
            gum_info "Done"
            ;;
        'Remove')
            gum_warn "Remove Package: ${pkg_name}"
            ! sudo_package_manager -Rns "$pkg_name" && gum_fail "Removing ${pkg_name} failed" && return 2
            gum_info "Done"
            ;;
        'Show PKGBUILD')
            print_header && gum_title "PKGBUILD" && echo
            package_manager -Gp "$pkg_name"
            ;;
        'Downgrade')
            gum_warn "Downgrade Package: ${pkg_name}"
            ! sudo downgrade "$pkg_name" && gum_fail "Downgrading ${pkg_name} failed" && return 2
            gum_info "Done"
            ;;
        'Exit')
            gum_info "Done"
            return 3
            ;;
        *) gum_fail "Action '${user_input}' not available" && exit 1 ;;
        esac
        gum_confirm --affirmative "< Back" --negative '' '' || exit 3
        print_header
    done
    return 0
}

# -------------------------------------------------------------------

action_fetch() { # List package updates
    print_news_info && gum_title "Fetch Package Updates"
    local orphans_packages orphans_count
    # Preload and force return 0. Cancel if user press ctrl + c
    ! gum_spin --title 'Checking Package Informations...' -- bash -c "${SELF} check; exit 0" && gum_fail "Failed" && return 2
    if ! action_check_updates_available; then
        gum_info "Your system is up to date"
    fi
    # Show orphans info
    print_orphans_info
    # Show pacdiff warning
    print_pacdiff_info
    return 0
}

# -------------------------------------------------------------------

action_upgrade() { # Update packages
    print_news_info && ! gum_confirm "Upgrade System Packages?" && return 3
    gum_title "Upgrade System Packages"
    # Prepare args
    local paru_args=()
    paru_args+=('--disable-download-timeout')
    [ "$AUR_SUPPORT" = "true" ] && [ "$AUR_REVIEW" = "false" ] && paru_args+=('--skipreview')
    [ "$ARCH_UPGRADE_CONFIRM" = "false" ] && paru_args+=('--noconfirm')
    # Upgrade system
    ! sudo_package_manager -Syuq "${paru_args[@]}" && gum_fail "System Upgrade failed" && return 2
    if [ "$FLATPAK_SUPPORT" = "true" ]; then
        # Check if flatpak updates available
        if [ -n "$(flatpak remote-ls --updates)" ]; then
            if [ "$FLATPAK_UPGRADE_CONFIRM" = "false" ]; then # Do auto flatpak update
                ! gum_spin --title 'Upgrade Flatpak Apps...' -- bash -c "flatpak update -y --noninteractive" && gum_fail "Flatpak Upgrade failed" && return 2
            else # Do Interactive flatpak update
                gum_mesg "Upgrade Flatpak Apps" && ! flatpak update && gum_fail "Flatpak Upgrade failed" && return 2
            fi
            gum_mesg "Flatpak Upgrade finished"
        else # Up to date
            gum_mesg "Flatpak is up to date"
        fi
    fi
    ! sync_package_db && gum_fail "Synchronize Package Database failed!" # Resync packages
    gum_info "System Upgrade finished"
    # Show orphans info
    print_orphans_info
    # Show pacdiff warning
    print_pacdiff_info
    return 0
}

# -------------------------------------------------------------------

action_orphans() { # Remove orphaned packages
    ! gum_confirm "Remove Package Orphans?" && return 3
    gum_title "Remove Package Orphans"
    local paru_args=() && [ "$ORPHANS_CONFIRM" = "false" ] && paru_args+=('--noconfirm')
    # Remove pacman orphans
    # shellcheck disable=SC2046
    if package_manager -Qtdq &>/dev/null; then
        ! sudo_package_manager -Rns "${paru_args[@]}" $(package_manager -Qtdq) && gum_fail "Remove System Orphans failed" && return 2
    else
        gum_mesg "No orphaned system packages found"
    fi
    # Remove pacman orphans (alternative)
    #! sudo_package_manager -Rsu --noconfirm $(package_manager -Qqd) 2>/dev/null && gum_fail "Failed" && return 2
    # Remove unused flatpaks
    if [ "$FLATPAK_SUPPORT" = "true" ]; then
        if [ "$ORPHANS_CONFIRM" = "false" ]; then # Do auto flatpak orphans
            ! gum_spin --title 'Remove Flatpak Orphans...' -- bash -c "flatpak uninstall -y --noninteractive --unused" && gum_fail "Remove Flatpak Orphans failed" && return 2
            gum_mesg "Remove Flatpak Orphans finished"
        else # Do Interactive flatpak orphans
            gum_mesg "Remove Flatpak Orphans" && ! flatpak uninstall --unused && gum_fail "Remove Flatpak Orphans failed" && return 2
        fi
    fi
    gum_info "Done"
    return 0
}

# -------------------------------------------------------------------

action_merge() { # Merge updated config files
    if ! command -v pacdiff &>/dev/null || ! command -v meld &>/dev/null; then
        ! gum_confirm "Install Dependencies? (meld)" && return 3
        gum_title "Install Pacdiff Tools"
        ! sudo_package_manager -Sq --disable-download-timeout --needed meld && gum_warn "Canceled" && return 2
        print_header # Clean install output & print new header
    fi
    gum_title "Merge Configuration Updates"
    local pacdiff_info && pacdiff_info="$(pacdiff -o)"
    # Check if up to date and return
    [ -z "$pacdiff_info" ] && gum_info "Nothing to do" && return 0
    # Merge files
    echo -e "$pacdiff_info" && echo
    ! sudo DIFFPROG=meld pacdiff && echo -e '\n' && gum_warn "Canceled" && return 2
    gum_info "Done"
    return 0
}

# -------------------------------------------------------------------

action_refresh() { # Refresh mirrorlist with reflector
    if ! command -v reflector &>/dev/null; then
        ! gum_confirm "Install Dependencies? (reflector)" && return 3
        gum_title "Install Reflector"
        ! sudo_package_manager -Sq --disable-download-timeout --needed reflector && gum_warn "Canceled" && return 2
        print_header # Clean install output & print new header
    fi
    gum_title "Refresh Pacman Mirrorlist"
    # Refresh mirrorlist with reflector and return if user press ctrl + c
    ! gum_spin --title 'Waiting for Reflector...' -- bash -c "reflector --latest 5 --protocol https --sort rate --save ${ARCH_OS_HOME}/.mirrorlist.tmp &> /dev/null; wait; exit 0" && gum_fail "Failed" && return 2
    cat "${ARCH_OS_HOME}/.mirrorlist.tmp"
    echo && ! gum_confirm "Save Mirrorlist?" && return 3
    # Save mirrorlist and set correct permissions
    sudo mv -f "${ARCH_OS_HOME}/.mirrorlist.tmp" /etc/pacman.d/mirrorlist
    sudo chown root:root /etc/pacman.d/mirrorlist
    gum_info "Successfully copied to /etc/pacman.d/mirrorlist"
    return 0
}

# -------------------------------------------------------------------

action_downgrade() { # Downgrade packages
    if ! command -v /usr/bin/downgrade &>/dev/null; then
        [ "$AUR_SUPPORT" = "false" ] && gum_fail "AUR Helper is missing to install downgrade!" && return 2
        ! gum_confirm "Install Dependencies? (downgrade)" && return 3
        gum_title "Install Downgrade"
        local paru_args=() && [ "$AUR_SUPPORT" = "true" ] && [ "$AUR_REVIEW" = "false" ] && paru_args+=('--skipreview')
        ! sudo_package_manager -Sq --disable-download-timeout --needed "${paru_args[@]}" downgrade && gum_warn "Canceled" && return 2
        print_header # Clean install output & print new header
    fi
    gum_title "Downgrade Packages"
    local user_input options
    mapfile -t options < <(pacman -Qqn | uniq) # Only packages from official db
    ! user_input=$(gum_filter --limit 25 --height "$FILTER_RESULT_SIZE" --placeholder "Type to filter and toggle with CTRL + Space ..." "${options[@]}") && return 3
    [ -z "$user_input" ] && gum_warn "No package selected" && return 2
    mapfile -t user_input <<<"$user_input" # Convert string to array
    # Print packages
    for item in "${user_input[@]}"; do gum_green "> ${item}"; done
    ! gum_confirm "Downgrade selected packages?" && return 3
    ! sudo downgrade "${user_input[@]}" && gum_warn "Canceled" && return 2
    gum_info "Downgrade successful"
    return 0
}

# -------------------------------------------------------------------

action_reset() { # Keyring reset (if update failed, try to reset & reinit keyring)
    ! gum_confirm "Reset Pacman Keyring and perform System Upgrade?" && return 3
    gum_title "Reset Pacman"
    sudo rm -f /var/lib/pacman/db.lck # Remove pacman lock if exists
    # Keyring reset
    ! sudo rm -rf /etc/pacman.d/gnupg && gum_fail "Failed" && return 2
    ! sudo pacman-key --init && gum_fail "Failed" && return 2
    ! sudo pacman-key --populate && gum_fail "Failed" && return 2
    # Update Arch keyring & system
    local paru_args=()
    paru_args+=('--disable-download-timeout')
    [ "$AUR_SUPPORT" = "true" ] && [ "$AUR_REVIEW" = "false" ] && paru_args+=('--skipreview')
    [ "$ARCH_UPGRADE_CONFIRM" = "false" ] && paru_args+=('--noconfirm')
    ! sudo_package_manager -Syq --disable-download-timeout --noconfirm archlinux-keyring && sudo_package_manager -Suq "${paru_args[@]}" && gum_warn "Canceled" && return 2
    gum_info "Done"
    return 0
}

# ///////////////////////////////////////////////////////////////////
# HELPER FUNCTIONS
# ///////////////////////////////////////////////////////////////////

package_manager() { if [ "$AUR_SUPPORT" = "true" ]; then /usr/bin/paru "$@"; else /usr/bin/pacman "$@"; fi; }
sudo_package_manager() { if [ "$AUR_SUPPORT" = "true" ]; then /usr/bin/paru "$@"; else sudo /usr/bin/pacman "$@"; fi; }
sync_news_db() { gum_spin --title 'Synchronize News Database...' -- bash -c "curl -sf https://archlinux.org/feeds/news/ >${NEWS_DB}" || return 1; }

sync_package_db() {
    local pkg_manager="/usr/bin/pacman" && [ "$AUR_SUPPORT" = "true" ] && pkg_manager="/usr/bin/paru"
    gum_spin --title 'Synchronize Package Database...' -- bash -c "${pkg_manager} -Slq >${PACKAGES_DB}; sort ${PACKAGES_DB} | uniq > ${PACKAGES_DB}.trim; mv ${PACKAGES_DB}.trim ${PACKAGES_DB}" || return 1
}

# -------------------------------------------------------------------

print_header() {
    clear && gum_purple '
 █████  ██████   ██████ ██   ██      ██████  ███████ 
██   ██ ██   ██ ██      ██   ██     ██    ██ ██      
███████ ██████  ██      ███████     ██    ██ ███████ 
██   ██ ██   ██ ██      ██   ██     ██    ██      ██ 
██   ██ ██   ██  ██████ ██   ██      ██████  ███████
    ' && gum_white --bold "System Manager ${VERSION}" && echo
}

# -------------------------------------------------------------------

print_filled_spaces() {
    local total=24 && local input_string="$1" && local length="${#input_string}"
    if [ "$length" -ge "$total" ]; then
        echo "$input_string"
    else
        local padding=$((total - length))
        printf '%s%*s\n' "$input_string" "$padding" ""
    fi
}

# -------------------------------------------------------------------

print_package_info() {
    local result && result="$(echo "$1" | grep -i "^${2}" | sed -E "s/^${2}\s*:\s*//" || echo "unavailable")"
    echo "$result" | awk '{print (length($0) > '"${PACKAGE_INFO_WIDTH}"' ? substr($0, 1, '"${PACKAGE_INFO_WIDTH}"') "..." : $0)}' # Cut after 50 chars and print
}

# -------------------------------------------------------------------

print_news_info() {

    print_news_date() { echo "$(<"$NEWS_DB")" | xmllint --xpath "string(//item[$i]/pubDate)" - | date -f - "+%Y/%m/%d"; }
    print_news_title() { echo "$(<"$NEWS_DB")" | xmllint --xpath "string(//item[$i]/title)" -; }

    if [ -n "$NEWS_QUANTITY" ] && [ "$NEWS_QUANTITY" -gt 0 ] && gum_title "Arch Linux News"; then
        for ((i = 1; i <= NEWS_QUANTITY; i++)); do
            gum_white "$(print_news_date "$i") │ $(print_news_title "$i")"
        done
        [ "$NEWS_SHOW_URL" = "true" ] && echo && gum_white "More Information: https://archlinux.org/news"
        echo # Print new line
    fi
    return 0
}

print_pacdiff_info() {
    if [ "$PACDIFF_SHOW_INFO" = "true" ]; then
        local pacdiff_info && pacdiff_info="$(pacdiff -o)"
        [ -n "$pacdiff_info" ] && echo && gum_warn "Please merge this updated configurations:" && echo -e "$pacdiff_info"
    fi
    return 0
}

print_orphans_info() {
    if [ "$ORPHANS_SHOW_INFO" = "true" ]; then
        local orphans_packages orphans_count
        orphans_packages="$(pkg_manager -Qtdq &>/dev/null && pkg_manager -Qtdq)"
        orphans_count="$(echo "$orphans_packages" | wc -w)"
        [ "$orphans_count" -gt 0 ] && echo && gum_warn "Orphaned Packages found!" && echo
    fi
    return 0
}

# ///////////////////////////////////////////////////////////////////
# GUM
# ///////////////////////////////////////////////////////////////////

gum() { /usr/bin/gum "$@"; }

# Colors
gum_white() { gum_style --foreground "$COLOR_WHITE" "${@}"; }
gum_green() { gum_style --foreground "$COLOR_GREEN" "${@}"; }
gum_purple() { gum_style --foreground "$COLOR_PURPLE" "${@}"; }
gum_yellow() { gum_style --foreground "$COLOR_YELLOW" "${@}"; }
gum_red() { gum_style --foreground "$COLOR_RED" "${@}"; }

# Print
gum_title() { gum_purple --bold "> ${*}"; }
gum_mesg() { gum_white --bold "> ${*}"; }
gum_info() { gum_green --bold "> ${*}"; }
gum_warn() { gum_yellow --bold "> ${*}"; }
gum_fail() { gum_red --bold "> ${*}"; }

# Wrapper
gum_style() { gum style "${@}"; }
gum_filter() { gum filter --width="$PACKAGE_INFO_WIDTH" --prompt "> " --indicator "> " --header.foreground "$COLOR_PURPLE" "${@}"; }
gum_write() { gum write --width="$PACKAGE_INFO_WIDTH" --char-limit 0 "${@}"; }
gum_choose() { gum choose --no-show-help --header="" --cursor "> " "${@}"; }
gum_confirm() { gum confirm --no-show-help --prompt.foreground "$COLOR_PURPLE" "$@"; }
gum_spin() { gum spin --spinner dot "${@}"; }

# ///////////////////////////////////////////////////////////////////
# KITTY
# ///////////////////////////////////////////////////////////////////

kitty() {
    [ ! -f "$KITTY_CONF" ] && echo "$KITTY_CONF_TEMPLATE" >"$KITTY_CONF" # Create kitty.conf if not exists
    /usr/bin/kitty --detach --class "arch-os" --name "Arch OS" -c "$KITTY_CONF" "$@"
}

# https://sw.kovidgoyal.net/kitty/conf/
KITTY_CONF_TEMPLATE='
hide_window_decorations yes
remember_window_size false
initial_window_width 1080
initial_window_height 720
placement_strategy center
window_padding_width 32
font_size 10.0
active_tab_font_style bold
inactive_tab_font_style normal
foreground              #D8DEE9
background              #2E3440
selection_foreground    #3B4252
selection_background    #EBCB8B
active_tab_foreground   #2E3440
active_tab_background   #A3BE8C
inactive_tab_foreground #2E3440
inactive_tab_background #4C566A
cursor                  #D8DEE9
url_color               #81A1C1
color0                  #3B4252
color8                  #4C566A
color1                  #BF616A
color9                  #BF616A
color2                  #A3BE8C
color10                 #A3BE8C
color3                  #EBCB8B
color11                 #EBCB8B
color4                  #81A1C1
color12                 #81A1C1
color5                  #B48EAD
color13                 #B48EAD
color6                  #88C0D0
color14                 #88C0D0
color7                  #E5E9F0
color15                 #E5E9F0
'

# ///////////////////////////////////////////////////////////////////
# START SCRIPT
# ///////////////////////////////////////////////////////////////////

# Locating working dir
working_src=${BASH_SOURCE[0]}
while [ -L "$working_src" ]; do
    WORKING_DIR=$(cd -P "$(dirname "$working_src")" >/dev/null 2>&1 && pwd)
    working_src=$(readlink "$working_src")
    [[ $working_src != /* ]] && working_src=$WORKING_DIR/$working_src
done
WORKING_DIR=$(cd -P "$(dirname "$working_src")" >/dev/null 2>&1 && pwd)
SELF="$WORKING_DIR/$(basename "$0")"

main "$@" # Start main function
