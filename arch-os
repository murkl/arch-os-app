#!/usr/bin/env bash
# shellcheck disable=SC1090

# ///////////////////////////////////////////////////////////////////
#                         ARCH OS MANAGER
#                - Arch Linux Helper Script TUI -
# ///////////////////////////////////////////////////////////////////

# VERSIO
VERSION="1.4.6"

# HOME
ARCH_OS_HOME="${HOME}/.arch-os"
ARCH_OS_CONF="${ARCH_OS_HOME}/arch-os.conf"
KITTY_CONF="${ARCH_OS_HOME}/kitty.conf"
PACKAGES_DB="${ARCH_OS_HOME}/packages.db"

# COLORS
# https://github.com/muesli/termenv?tab=readme-ov-file#color-chart
COLOR_WHITE=7
COLOR_GREEN=2
COLOR_PURPLE=212
COLOR_YELLOW=3
COLOR_RED=1

# NEWS
ARCH_LINUX_NEWS=""

# ///////////////////////////////////////////////////////////////////
# MAIN
# ///////////////////////////////////////////////////////////////////

main() {

    set -Eeo pipefail # Set error handling
    local user_input options selected_action

    # Check dependencies
    if ! command -v /usr/bin/kitty &>/dev/null; then echo "ERROR: kitty not found" >&2 && exit 1; fi
    if ! command -v /usr/bin/gum &>/dev/null; then echo "ERROR: gum not found" >&2 && exit 1; fi
    if ! command -v /usr/bin/notify-send &>/dev/null; then echo "ERROR: notify-send not found" >&2 && exit 1; fi
    if ! command -v /usr/bin/checkupdates &>/dev/null; then echo "ERROR: checkupdates not found" >&2 && exit 1; fi
    if ! command -v /usr/bin/paru &>/dev/null; then echo "ERROR: paru not found" >&2 && exit 1; fi

    # Create & source properties
    init_settings

    # Check and start kitty
    if [ "$1" = '--kitty' ] || [ "$1" = '-k' ]; then
        shift # Shift argument to next
        # Start kitty if not already present
        if [ "$TERM" != "xterm-kitty" ]; then
            kitty "$SELF" "$@" # Open script in kitty instance
            exit 0
        fi
    fi

    # Check arguments
    if [ $# -gt 1 ]; then
        action_help && gum_fail "Max. 1 argument supported!"
        exit 1
    fi

    # If 'check' action
    if [ "$1" = "check" ]; then
        action_check_updates_available
        exit $?
    fi

    # If 'notify' action
    if [ "$1" = "notify" ]; then
        action_check_updates_available && notify "New updates available"
        exit $?
    fi

    # Set Traps
    trap 'trap_error $? ${FUNCNAME} ${LINENO}' ERR # Set error trap
    trap 'trap_exit $?' EXIT                       # Set exit trap

    # Handle user action
    selected_action="$1"

    # Init
    gum_title "Loading..."
    # Fetch the Arch Linux news feed
    gum_white "Loading Arch Linux News Feed..."
    [ -n "$ARCH_LINUX_NEWS_COUNT" ] && [ "$ARCH_LINUX_NEWS_COUNT" -gt 0 ] && ARCH_LINUX_NEWS=$(curl -s "https://archlinux.org/feeds/news/")
    [ ! -f "$PACKAGES_DB" ] && sync_packages

    # Show menu or execute user action
    while (true); do
        if [ -z "$selected_action" ]; then
            print_header # Print header
            options=("Search Package" "Fetch Updates" "Upgrade System" "Remove Orphans" "Merge Configurations" "Refresh Mirrorlist" "Downgrade Packages" "Reset Pacman" "System Info" "Settings" "Help" "Quit")
            user_input=$(gum_choose --height=15 --selected="$user_input" "${options[@]}") || exit 130
            case "$user_input" in # Set user action to selected action
            'Search Package') selected_action='search' ;;
            'Fetch Updates') selected_action='fetch' ;;
            'Upgrade System') selected_action='upgrade' ;;
            'Remove Orphans') selected_action='orphans' ;;
            'Merge Configurations') selected_action='merge' ;;
            'Refresh Mirrorlist') selected_action='refresh' ;;
            'Downgrade Packages') selected_action='downgrade' ;;
            'Reset Pacman') selected_action='reset' ;;
            'System Info') selected_action='system' ;;
            'Settings') selected_action='settings' ;;
            'Help') selected_action='help' ;;
            'Quit') exit 2 ;;
            *) gum_fail "Action '${user_input}' not available" && exit 1 ;;
            esac
        fi

        # Execute action
        case "$selected_action" in # Execute action
        'search') action_search ;;
        'fetch') action_fetch ;;
        'upgrade') action_upgrade ;;
        'orphans') action_orphans ;;
        'merge') action_merge ;;
        'refresh') action_refresh ;;
        'downgrade') action_downgrade ;;
        'reset') action_reset ;;
        'system') action_system ;;
        'settings') action_settings ;;
        'help') action_help ;;
        *) gum_fail "Action '${selected_action}' not available" && exit 1 ;;
        esac
        local result="$?"
        unset selected_action # Reset selected action
        [ "$result" = "2" ] && continue
        [ -n "$1" ] && gum_confirm --affirmative "Exit" --negative '' '' && exit 2
        ! gum_confirm --affirmative "< Back" --negative 'Exit' '' && exit 2
    done
}

# ///////////////////////////////////////////////////////////////////
# TRAPS
# ///////////////////////////////////////////////////////////////////

trap_exit() {
    rm -f "${ARCH_OS_HOME}/.mirrorlist.tmp"
    [ "$1" != "2" ] && [ "$1" != "130" ] && gum_confirm --affirmative 'Exit' --negative '' ''
    gum_mesg "Exit"
    return "$1"
}

trap_error() {
    [ "$1" != "2" ] && [ "$1" != "130" ] && gum_fail "${BASH_COMMAND} failed ($1) in function '${2}' (line ${3})"
    return "$1"
}

# ///////////////////////////////////////////////////////////////////
# ACTIONS
# ///////////////////////////////////////////////////////////////////

action_check_updates_available() { # Check & print package updates
    local update_available="false"
    checkupdates && update_available="true"
    paru -Qua && update_available="true"
    [ "$update_available" = "false" ] && return 2
    return 0
}

action_search() { # Manage packages
    local pkg_name pkg_info_remote pkg_info_local pkg_is_aur pkg_is_installed
    gum_title "Package"
    ! pkg_name=$(gum_filter --fuzzy --sort --limit 1 --height "$SEARCH_RESULT_SIZE" --placeholder "Search package..." <"$PACKAGES_DB") && gum_warn "Canceled" && return 0
    pkg_info_remote="$(LANG=en_US.UTF-8 paru -Si "$pkg_name" 2>/dev/null)" # Uninstalled
    pkg_is_aur="false" && [ "$(print_package_info "$pkg_info_remote" "Repository")" = "aur" ] && pkg_is_aur="true"
    pkg_is_installed="false" && pacman -Q "$pkg_name" &>/dev/null && pkg_is_installed="true"

    # Get package info
    if [ "$pkg_is_installed" = "true" ]; then
        pkg_info_local="$(LANG=en_US.UTF-8 paru -Qi "$pkg_name" 2>/dev/null)" # Installed
    fi

    #echo # Print new line
    gum_white --bold "$(print_filled_spaces "Name:") ${pkg_name}"
    gum_white "$(print_filled_spaces "Repository:") $(print_package_info "$pkg_info_remote" "Repository")"
    gum_white "$(print_filled_spaces "Version:") $(print_package_info "$pkg_info_remote" "Version")"
    gum_white "$(print_filled_spaces "Description:") $(print_package_info "$pkg_info_remote" "Description")"
    # Check if AUR pkg
    if [ "$pkg_is_aur" = "true" ]; then # AUR package info
        gum_white "$(print_filled_spaces "AUR URL:") $(print_package_info "$pkg_info_remote" "AUR URL")"
        gum_white "$(print_filled_spaces "AUR Maintainer:") $(print_package_info "$pkg_info_remote" "Maintainer")"
        gum_white "$(print_filled_spaces "AUR Votes:") $(print_package_info "$pkg_info_remote" "Votes")"
        gum_white "$(print_filled_spaces "AUR Popularity:") $(print_package_info "$pkg_info_remote" "Popularity")"
        gum_white "$(print_filled_spaces "AUR Modified:") $(print_package_info "$pkg_info_remote" "Last Modified" | date -f - "+%Y-%m-%d %H:%M")"
    else
        gum_white "$(print_filled_spaces "Package URL:") $(print_package_info "$pkg_info_remote" "URL")"
        gum_white "$(print_filled_spaces "Package Date:") $(print_package_info "$pkg_info_remote" "Build Date" | date -f - "+%Y-%m-%d %H:%M")"
    fi

    # Check if pkg is installed
    if [ "$pkg_is_installed" = "true" ]; then # Installed
        gum_white "$(print_filled_spaces "Install Date:") $(print_package_info "$pkg_info_local" "Install Date" | date -f - "+%Y-%m-%d %H:%M")"
        gum_white "$(print_filled_spaces "Install Version:") $(print_package_info "$pkg_info_local" "Version")"
        gum_white "$(print_filled_spaces "Install Reason:") $(print_package_info "$pkg_info_local" "Install Reason")"
        gum_green --bold "$(print_filled_spaces "Installed:") yes"
    else # Not installed
        gum_yellow --bold "$(print_filled_spaces "Installed:") no"
    fi

    # Show options menu
    echo && gum_title "Options"
    local options=()
    local user_input=''
    [ "$pkg_is_installed" = "false" ] && options+=("Install")
    [ "$pkg_is_installed" = "true" ] && options+=("Remove")
    options+=("Quit")
    user_input=$(gum_choose --height=5 "${options[@]}") || return 0
    case "$user_input" in # Set user action to selected action
    'Install')
        gum_info "Install Package: ${pkg_name} (AUR: ${pkg_is_aur})"
        local paru_args="" && [ "$AUR_REVIEW_ENABLED" = "false" ] && paru_args='--skipreview'
        ! paru -S $paru_args "$pkg_name" && gum_fail "Installing ${pkg_name} failed" && return 0
        gum_info "Done"
        return 0
        ;;
    'Remove')
        gum_warn "Remove Package: ${pkg_name} (AUR: ${pkg_is_aur})"
        ! paru -Rns "$pkg_name" && gum_fail "Removing ${pkg_name} failed" && return 0
        gum_info "Done"
        return 0
        ;;
    'Quit')
        gum_info "Done"
        return 0
        ;;
    *) gum_fail "Action '${user_input}' not available" && exit 1 ;;
    esac
    return 0
}

action_fetch() { # List package updates
    print_news
    local pacdiff_info && pacdiff_info="$(pacdiff -o)"
    [ -n "$pacdiff_info" ] && echo && gum_warn "Please merge this updated configurations:" && echo -e "$pacdiff_info"
    gum_title "Fetch Package Updates"
    ! gum_spin --title 'Checking Package Informations...' -- bash -c "checkupdates; paru -Qua; wait; exit 0" && gum_warn "Canceled" && return 0 # Preload and return if user press ctrl + c
    ! action_check_updates_available && gum_info "Your system is up to date" && return 0
    return 0
}

action_upgrade() { # Update packages
    print_news && echo && gum_title "Upgrade System Packages"
    local paru_args && [ "$AUR_REVIEW_ENABLED" = "false" ] && paru_args='--skipreview'
    ! paru -Syu $paru_args && gum_fail "Upgrade failed" && return 0
    sync_packages
    local pacdiff_info && pacdiff_info="$(pacdiff -o)"
    gum_info "System Upgrade successful"
    [ -n "$pacdiff_info" ] && echo && gum_warn "Please merge this updated configurations:" && echo -e "$pacdiff_info"
    return 0
}

action_orphans() { # Remove orphaned packages
    gum_title "Remove Package Orphans"
    # shellcheck disable=SC2046
    paru -Qtdq &>/dev/null && ! { paru -Rns --noconfirm $(paru -Qtdq) 2>/dev/null; } && gum_warn "Canceled" && return 0 # Remove orphans
    # shellcheck disable=SC2046
    ! paru -Rsu --noconfirm $(paru -Qqd) 2>/dev/null && gum_warn "Canceled" && return 0 # Remove orphans
    # Remove unused flatpaks
    [ "$FLATPAK_SUPPORT_ENABLED" = "true" ] && command -v flatpak &>/dev/null && ! flatpak uninstall -y --unused && gum_warn "Canceled" && return 0
    gum_info "Done"
    return 0
}

action_merge() { # Merge updated config files
    if ! command -v pacdiff &>/dev/null || ! command -v meld &>/dev/null; then
        gum_title "Install Pacman Tools"
        ! gum_confirm "Install missing package?" && gum_warn "Canceled" && return 0
        paru -S pacman-contrib meld
        print_header # Clean install output & print new header
    fi
    gum_title "Merge Configuration Updates"
    local pacdiff_info && pacdiff_info="$(pacdiff -o)"
    [ -z "$pacdiff_info" ] && gum_info "Nothing to do" && return 0
    echo -e "$pacdiff_info" && echo
    ! sudo DIFFPROG=meld pacdiff && echo -e '\n' && gum_warn "Canceled" && return 0
    gum_info "Done"
    return 0
}

action_refresh() { # Refresh mirrorlist with reflector
    if ! command -v reflector &>/dev/null; then
        gum_title "Install Reflector"
        ! gum_confirm "Install missing package?" && gum_warn "Canceled" && return 0
        paru -S reflector
        print_header # Clean install output & print new header
    fi
    gum_title "Refresh Pacman Mirrorlist"
    # Refresh mirrorlist with reflector and return if user press ctrl + c
    ! gum_spin --title 'Waiting for Reflector...' -- bash -c "reflector --latest 5 --protocol https --sort rate --save ${ARCH_OS_HOME}/.mirrorlist.tmp &> /dev/null; wait; exit 0" && gum_warn "Canceled" && return 0
    cat "${ARCH_OS_HOME}/.mirrorlist.tmp"
    echo && ! gum_confirm "Save Mirrorlist?" && gum_warn "Canceled" && return 0
    sudo mv -f "${ARCH_OS_HOME}/.mirrorlist.tmp" /etc/pacman.d/mirrorlist
    sudo chown root:root /etc/pacman.d/mirrorlist
    gum_info "Successfully copied to /etc/pacman.d/mirrorlist"
    return 0
}

action_downgrade() { # Downgrade packages
    if ! command -v /usr/bin/downgrade &>/dev/null; then
        gum_title "Install Downgrade"
        ! gum_confirm "Install missing package?" && gum_warn "Canceled" && return 0
        local paru_args && [ "$AUR_REVIEW_ENABLED" = "false" ] && paru_args='--skipreview'
        paru -S $paru_args downgrade
        print_header # Clean install output & print new header
    fi
    gum_title "Downgrade System Packages"
    local user_input options
    mapfile -t options < <(pacman -Qqn | uniq) # Only packages from official db
    ! user_input=$(gum_filter --limit 25 --height 15 --placeholder "Type to filter and toggle with CTRL + Space ..." "${options[@]}") && gum_warn "Canceled" && return 0
    [ -z "$user_input" ] && gum_warn "No package selected" && return 0
    mapfile -t user_input <<<"$user_input" # Convert string to array
    for item in "${user_input[@]}"; do gum_green "> ${item}"; done
    ! gum_confirm "Downgrade selected packages?" && gum_warn "Canceled" && return 0
    ! sudo downgrade "${user_input[@]}" && gum_warn "Canceled" && return 0
    gum_info "Downgrade successful"
    return 0
}

action_reset() { # Keyring reset (if update failed, try to reset & reinit keyring)
    gum_title "Reset Pacman"
    ! gum_confirm "Are you sure?" && gum_warn "Canceled" && return 0
    sudo rm -f /var/lib/pacman/db.lck # Remove pacman lock if exists
    # Keyring reset
    ! sudo rm -rf /etc/pacman.d/gnupg && gum_warn "Canceled" && return 0
    ! sudo pacman-key --init && gum_warn "Canceled" && return 0
    ! sudo pacman-key --populate && gum_warn "Canceled" && return 0
    # Update Arch keyring & system
    local paru_args && [ "$AUR_REVIEW_ENABLED" = "false" ] && paru_args='--skipreview'
    ! paru -Sy --noconfirm archlinux-keyring && paru -Su $paru_args && gum_warn "Canceled" && return 0
    gum_info "Done"
    return 0
}

action_system() { # System Logs
    gum_title "System Error Logs"
    journalctl -p 3 -b --quiet --no-pager
    echo && gum_title "Service Error Logs"
    systemctl --failed
    return 0
}

action_settings() { # Settings
    gum_title "Edit Settings"
    if gum_write --height=10 --width=75 --value="$(cat "$ARCH_OS_CONF")" >"${ARCH_OS_CONF}.new"; then
        mv "${ARCH_OS_CONF}.new" "${ARCH_OS_CONF}" && init_settings
        gum_info "Settings saved at ${ARCH_OS_CONF}" && return 0
    else
        rm -f "${ARCH_OS_CONF}.new" # Remove tmp properties
        gum_warn "Canceled" && return 0
    fi
}

# ///////////////////////////////////////////////////////////////////
# PACKAGES
# ///////////////////////////////////////////////////////////////////

print_package_info() {
    local result
    result="$(echo "$1" | grep -i "^${2}" | sed -E "s/^${2}\s*:\s*//" || echo "unavailable")"
    # Cut after 50 chars and print
    echo "$result" | awk '{print (length($0) > '"${PACKAGE_INFO_WIDTH}"' ? substr($0, 1, '"${PACKAGE_INFO_WIDTH}"') "..." : $0)}'
}

sync_packages() {
    gum_spin --title 'Synchronize Package Database...' -- bash -c "pacman -Slq >${PACKAGES_DB}; paru -Slq >>${PACKAGES_DB}; sort ${PACKAGES_DB} | uniq > ${PACKAGES_DB}.trim; mv ${PACKAGES_DB}.trim ${PACKAGES_DB}" || gum_warn "Canceled"
}

# ///////////////////////////////////////////////////////////////////
# SETTINGS
# ///////////////////////////////////////////////////////////////////

init_settings() {

    # Init properties
    mkdir -p "$ARCH_OS_HOME"
    touch "$ARCH_OS_CONF"
    source "$ARCH_OS_CONF"

    # Set default properties
    [ -z "$ARCH_LINUX_NEWS_COUNT" ] && ARCH_LINUX_NEWS_COUNT="3"
    [ -z "$FLATPAK_SUPPORT_ENABLED" ] && FLATPAK_SUPPORT_ENABLED="true"
    [ -z "$AUR_REVIEW_ENABLED" ] && AUR_REVIEW_ENABLED="false"
    [ -z "$SEARCH_RESULT_SIZE" ] && SEARCH_RESULT_SIZE="20"
    [ -z "$PACKAGE_INFO_WIDTH" ] && PACKAGE_INFO_WIDTH="80"

    # Validate properties
    [ "$ARCH_LINUX_NEWS_COUNT" -gt 10 ] && ARCH_LINUX_NEWS_COUNT="10" # Set to max 10
    [ "$ARCH_LINUX_NEWS_COUNT" -lt 0 ] && ARCH_LINUX_NEWS_COUNT="0"   # Set to min 0
    [ "$SEARCH_RESULT_SIZE" -gt 50 ] && SEARCH_RESULT_SIZE="50"       # Set to max 50
    [ "$SEARCH_RESULT_SIZE" -lt 1 ] && SEARCH_RESULT_SIZE="1"         # Set to min 1
    [ "$PACKAGE_INFO_WIDTH" -gt 500 ] && PACKAGE_INFO_WIDTH="500"     # Set to max 500
    [ "$PACKAGE_INFO_WIDTH" -lt 20 ] && PACKAGE_INFO_WIDTH="20"       # Set to min 20

    { # Write properties
        echo "ARCH_LINUX_NEWS_COUNT=${ARCH_LINUX_NEWS_COUNT}"
        echo "FLATPAK_SUPPORT_ENABLED=${FLATPAK_SUPPORT_ENABLED}"
        echo "AUR_REVIEW_ENABLED=${AUR_REVIEW_ENABLED}"
        echo "SEARCH_RESULT_SIZE=${SEARCH_RESULT_SIZE}"
        echo "PACKAGE_INFO_WIDTH=${PACKAGE_INFO_WIDTH}"
    } >"$ARCH_OS_CONF"

    # Source again
    source "$ARCH_OS_CONF"
}

# ///////////////////////////////////////////////////////////////////
# NEWS
# ///////////////////////////////////////////////////////////////////

get_news_date() { echo "$ARCH_LINUX_NEWS" | xmllint --xpath "string(//item[$i]/pubDate)" - | date -f - "+%Y/%m/%d"; }
get_news_title() { echo "$ARCH_LINUX_NEWS" | xmllint --xpath "string(//item[$i]/title)" -; }
get_news_url() { echo "$ARCH_LINUX_NEWS" | xmllint --xpath "string(//item[$i]/link)" -; }

print_news() {
    if [ -n "$ARCH_LINUX_NEWS_COUNT" ] && [ "$ARCH_LINUX_NEWS_COUNT" -gt 0 ] && gum_title "Arch Linux News"; then
        for ((i = 1; i <= ARCH_LINUX_NEWS_COUNT; i++)); do
            gum_white "$(get_news_date "$i") │ $(get_news_title "$i")"
            #gum_white "$(get_news_date "$i") $(get_news_url "$i")"
        done
        echo && gum_white "More Information: https://archlinux.org/news"
        #[ "$i" -lt "$ARCH_LINUX_NEWS_COUNT" ] && echo
    fi
    return 0
}

# ///////////////////////////////////////////////////////////////////
# GUM
# ///////////////////////////////////////////////////////////////////

gum() { /usr/bin/gum "$@"; }

gum_white() { gum_style --foreground "$COLOR_WHITE" "${@}"; }
gum_green() { gum_style --foreground "$COLOR_GREEN" "${@}"; }
gum_purple() { gum_style --foreground "$COLOR_PURPLE" "${@}"; }
gum_yellow() { gum_style --foreground "$COLOR_YELLOW" "${@}"; }
gum_red() { gum_style --foreground "$COLOR_RED" "${@}"; }

gum_style() { gum style "${@}"; }
gum_filter() { gum filter --width=80 --prompt "> " --indicator "> " --header.foreground "$COLOR_PURPLE" "${@}"; }
gum_write() { gum write --prompt "• " --header.foreground "$COLOR_PURPLE" --show-cursor-line --char-limit 0 "${@}"; }
gum_choose() { gum choose --no-show-help --header="" --cursor "> " "${@}"; }
gum_confirm() { gum confirm --no-show-help --prompt.foreground "$COLOR_PURPLE" "$@"; }
gum_spin() { gum spin --spinner dot "${@}"; }

gum_title() { gum_purple --bold "> ${*}"; }
gum_mesg() { gum_white --bold "> ${*}"; }
gum_info() { gum_green --bold "> ${*}"; }
gum_warn() { gum_yellow --bold "> ${*}"; }
gum_fail() { gum_red --bold "> ${*}"; }

# ///////////////////////////////////////////////////////////////////
# PRINT & NOTIFY
# ///////////////////////////////////////////////////////////////////

print_header() {
    clear && gum_purple '
 █████  ██████   ██████ ██   ██      ██████  ███████ 
██   ██ ██   ██ ██      ██   ██     ██    ██ ██      
███████ ██████  ██      ███████     ██    ██ ███████ 
██   ██ ██   ██ ██      ██   ██     ██    ██      ██ 
██   ██ ██   ██  ██████ ██   ██      ██████  ███████
    ' && gum_white --bold "System Manager ${VERSION}" && echo
}

action_help() {
    gum_title 'App'
    gum_white 'arch-os [--kitty | -k]            Open main menu'
    echo && gum_title 'Actions'
    gum_white 'arch-os [--kitty | -k] check      Check & print package updates'
    gum_white 'arch-os [--kitty | -k] notify     Check, print & notify package updates'
    gum_white 'arch-os [--kitty | -k] search     Search package'
    gum_white 'arch-os [--kitty | -k] fetch      Fetch package updates'
    gum_white 'arch-os [--kitty | -k] upgrade    System upgrade'
    gum_white 'arch-os [--kitty | -k] orphans    Remove orphaned packages'
    gum_white 'arch-os [--kitty | -k] merge      Merge updated configurations'
    gum_white 'arch-os [--kitty | -k] refresh    Refresh Pacman mirrorlist'
    gum_white 'arch-os [--kitty | -k] downgrade  Downgrade packages'
    gum_white 'arch-os [--kitty | -k] reset      Reset Pacman'
    gum_white 'arch-os [--kitty | -k] system     System info'
    gum_white 'arch-os [--kitty | -k] settings   Settings'
    gum_white 'arch-os [--kitty | -k] help       Help'
}

notify() { notify-send --app-name "Arch OS" -i "${WORKING_DIR}/docs/logo.svg" "Arch OS" "$@"; }

print_filled_spaces() {
    local total=24
    local input_string="$1"
    local length="${#input_string}"

    if [ "$length" -ge "$total" ]; then
        echo "$input_string"
    else
        local padding=$((total - length))
        printf '%s%*s\n' "$input_string" "$padding" ""
    fi
}

# ///////////////////////////////////////////////////////////////////
# KITTY & CONFIG
# ///////////////////////////////////////////////////////////////////

kitty() {
    [ ! -f "$KITTY_CONF" ] && echo "$KITTY_CONF_TEMPLATE" >"$KITTY_CONF"
    /usr/bin/kitty --detach --class "arch-os" --name "Arch OS" -c "$KITTY_CONF" "$@"
}

# https://sw.kovidgoyal.net/kitty/conf/
KITTY_CONF_TEMPLATE='
hide_window_decorations yes
remember_window_size false
initial_window_width 1080
initial_window_height 720
placement_strategy center
window_padding_width 32
font_family Fira Code Nerd Font
font_size 10.0
active_tab_font_style bold
inactive_tab_font_style normal
foreground              #D8DEE9
background              #2E3440
selection_foreground    #3B4252
selection_background    #EBCB8B
active_tab_foreground   #2E3440
active_tab_background   #A3BE8C
inactive_tab_foreground #2E3440
inactive_tab_background #4C566A
cursor                  #D8DEE9
url_color               #81A1C1
color0                  #3B4252
color8                  #4C566A
color1                  #BF616A
color9                  #BF616A
color2                  #A3BE8C
color10                 #A3BE8C
color3                  #EBCB8B
color11                 #EBCB8B
color4                  #81A1C1
color12                 #81A1C1
color5                  #B48EAD
color13                 #B48EAD
color6                  #88C0D0
color14                 #88C0D0
color7                  #E5E9F0
color15                 #E5E9F0
'

# ///////////////////////////////////////////////////////////////////
# START SCRIPT
# ///////////////////////////////////////////////////////////////////

# Locating working dir
working_src=${BASH_SOURCE[0]}
while [ -L "$working_src" ]; do
    WORKING_DIR=$(cd -P "$(dirname "$working_src")" >/dev/null 2>&1 && pwd)
    working_src=$(readlink "$working_src")
    [[ $working_src != /* ]] && working_src=$WORKING_DIR/$working_src
done
WORKING_DIR=$(cd -P "$(dirname "$working_src")" >/dev/null 2>&1 && pwd)
SELF="$WORKING_DIR/$(basename "$0")"

main "$@" # Start main function
