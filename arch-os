#!/usr/bin/env bash
set -Eeuo pipefail

VERSION="1.0.2"

# ///////////////////////////////////////////////////////////////////
# ENVIRONMENT
# ///////////////////////////////////////////////////////////////////

CACHE_DIR="${HOME}/.cache/arch-os"

COLOR_WHITE=251
COLOR_GREEN=42
COLOR_PURPLE=212
COLOR_YELLOW=221
COLOR_RED=9

KITTY_CONF='
hide_window_decorations yes
remember_window_size false
initial_window_width 800
initial_window_height 600
window_padding_width 32
font_family Fira Code Nerd Font
font_size 10.0
active_tab_font_style bold
inactive_tab_font_style normal
foreground              #D8DEE9
background              #2E3440
selection_foreground    #3B4252
selection_background    #EBCB8B
active_tab_foreground   #2E3440
active_tab_background   #A3BE8C
inactive_tab_foreground #2E3440
inactive_tab_background #4C566A
cursor                  #D8DEE9
url_color               #81A1C1
color0                  #3B4252
color8                  #4C566A
color1                  #BF616A
color9                  #BF616A
color2                  #A3BE8C
color10                 #A3BE8C
color3                  #EBCB8B
color11                 #EBCB8B
color4                  #81A1C1
color12                 #81A1C1
color5                  #B48EAD
color13                 #B48EAD
color6                  #88C0D0
color14                 #88C0D0
color7                  #E5E9F0
color15                 #E5E9F0
'

# ///////////////////////////////////////////////////////////////////
# MAIN
# ///////////////////////////////////////////////////////////////////

main() {

    local user_arg="$*"

    # Check dependencies
    if ! command -v /usr/bin/kitty &>/dev/null; then echo "ERROR: kitty not found" >&2 && exit 1; fi
    if ! command -v /usr/bin/gum &>/dev/null; then echo "ERROR: gum not found" >&2 && exit 1; fi
    if ! command -v /usr/bin/paru &>/dev/null; then echo "ERROR: paru not found" >&2 && exit 1; fi

    # Check updates (used from extension)
    if [ -n "$user_arg" ] && [ "$user_arg" = "-c" ]; then
        action_check_updates # Check updates
        exit $?              # Exit with result from update check
    fi

    # Check if executed in kitty, otherwise start with kitty
    [ "$TERM" != "xterm-kitty" ] && kitty "$0" "$@" && exit 0

    trap 'trap_exit $?' EXIT # Set exit trap
    trap 'trap_error $?' ERR # Set error trap

    # Handle arg action
    if [ -n "$user_arg" ]; then # Remove trailing dashes from arg
        print_header
        local user_arg=${1#"-"} && user_arg=${user_arg#"-"}
        case "$user_arg" in # Execute action
        l) action_list_updates ;;
        u) action_upgrade_system ;;
        o) action_remove_orphans ;;
        r) action_reset ;;
        h) print_help ;;
        *) print_fail "Option '${user_arg}' not available" && exit 1 ;;
        esac
        exit # Exit
    fi

    while (true); do
        print_header && local user_input
        local options=("List Updates" "Upgrade System" "Remove Orphans" "Reset Keyring" "Open Help" "Quit")
        user_input=$(gum_choose "${options[@]}") || exit 130
        case "$user_input" in # Execute action
        'List Updates') action_list_updates ;;
        'Upgrade System') action_upgrade_system ;;
        'Remove Orphans') action_remove_orphans ;;
        'Reset Keyring') action_reset ;;
        'Open Help') print_help ;;
        'Quit') exit 130 ;;
        *) print_fail "Option '${user_input}' not available" && exit 1 ;;
        esac
        gum confirm --affirmative '<- Back' --negative '' ''
    done
}

# ///////////////////////////////////////////////////////////////////
# ACTIONS
# ///////////////////////////////////////////////////////////////////

action_check_updates() {
    checkupdates
    paru -Qua
}

action_list_updates() { # List package updates
    print_title "List Package Updates"
    gum spin --title 'Loading' -- bash -c "checkupdates; paru -Qua; exit 0" || return 0 # Preload and return if user press ctrl + c
    local update_available="false"
    # Call again after spin (now it should cached)
    checkupdates && update_available="true" # Print Arch pkgs
    paru -Qua && update_available="true"    # Print AUR pkgs
    [ "$update_available" = "false" ] && print_warn "No package updates available"
    return 0
}

action_upgrade_system() { # Update packages
    print_title "Upgrade System Packages"
    paru -Syu --skipreview
    print_info "Upgrade successful"
    return 0
}

action_remove_orphans() { # Remove orphaned packages
    print_title "Remove Orphans"
    # shellcheck disable=SC2046
    paru -Qtdq &>/dev/null && paru -Rns $(paru -Qtdq)
    # shellcheck disable=SC2046
    paru -Rsu $(paru -Qqd)
    print_info "Done" && echo
    print_title "Remove unused flatpaks"
    flatpak uninstall -y --unused
    print_info "Done"
    return 0
}

action_reset() { # Keyring reset (if update failed, try to reset & reinit keyring)
    gum confirm "Really reset Arch Keyring?" || return 0
    print_title "Reset Arch Keyring"
    # Keyring reset
    sudo rm -rf /etc/pacman.d/gnupg
    sudo pacman-key --init
    sudo pacman-key --populate
    print_info "Done" && echo && wait
    # Update
    print_title "Update Arch keyring"
    sudo pacman -Sy archlinux-keyring --noconfirm && paru -Su --skipreview
    print_info "Done"
    return 0
}

# ///////////////////////////////////////////////////////////////////
# TRAPS
# ///////////////////////////////////////////////////////////////////

trap_exit() { [ $? != 130 ] && gum confirm --affirmative 'Exit' --negative '' ''; }
trap_error() { print_fail "Execution failed"; }

# ///////////////////////////////////////////////////////////////////
# KITTY
# ///////////////////////////////////////////////////////////////////

kitty() { mkdir -p "$CACHE_DIR" && echo "$KITTY_CONF" >"${CACHE_DIR}/kitty.conf" && /usr/bin/kitty --detach --class "arch-os" -c "${CACHE_DIR}/kitty.conf" "$@"; }

# ///////////////////////////////////////////////////////////////////
# GUM
# ///////////////////////////////////////////////////////////////////

gum() { /usr/bin/gum "$@"; }
gum_white() { gum style --foreground "$COLOR_WHITE" "${@}"; }
gum_green() { gum style --foreground "$COLOR_GREEN" "${@}"; }
gum_purple() { gum style --foreground "$COLOR_PURPLE" "${@}"; }
gum_yellow() { gum style --foreground "$COLOR_YELLOW" "${@}"; }
gum_red() { gum style --foreground "$COLOR_RED" "${@}"; }
gum_choose() { gum choose --cursor "$(gum_space)• " --header.foreground "$COLOR_PURPLE" --cursor.foreground "$COLOR_PURPLE" "${@}"; }
#gum_space() { echo '                                    '; }
gum_space() { echo '                '; }

# ///////////////////////////////////////////////////////////////////
# PRINT
# ///////////////////////////////////////////////////////////////////

print_header() {
    local header_logo header_title header_container
    header_logo='
 █████  ██████   ██████ ██   ██      ██████  ███████ 
██   ██ ██   ██ ██      ██   ██     ██    ██ ██      
███████ ██████  ██      ███████     ██    ██ ███████ 
██   ██ ██   ██ ██      ██   ██     ██    ██      ██ 
██   ██ ██   ██  ██████ ██   ██      ██████  ███████
    ' && header_logo=$(gum_purple --bold "$header_logo")
    header_title="${VERSION}" && header_title=$(gum_white --bold "$header_title")
    header_container=$(gum join --vertical "$header_logo" "$header_title")
    clear && gum style --width 89 --align center --margin '0 0' "$header_container" && echo
}

print_title() { gum_purple --bold "•  ${*}"; }
print_info() { gum_green --bold ">  ${*}"; }
print_warn() { gum_yellow --bold ">  ${*}"; }
print_fail() { gum_red --bold ">  ${*}"; }

print_help() {
    print_title "Help" && echo
    gum_white --bold 'arch-os     Open app'
    echo
    print_title "Commands" && echo
    gum_white --bold 'arch-os -h  Open help page'
    gum_white --bold 'arch-os -c  Check package updates'
    gum_white --bold 'arch-os -l  List package updates'
    gum_white --bold 'arch-os -u  Execute system upgrade'
    gum_white --bold 'arch-os -o  Remove orphaned packages'
    gum_white --bold 'arch-os -r  Reset keyring'
}

# ///////////////////////////////////////////////////////////////////
# START SCRIPT
# ///////////////////////////////////////////////////////////////////

main "$@"
