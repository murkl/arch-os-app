#!/usr/bin/env bash

VERSION="1.3.0"

# ///////////////////////////////////////////////////////////////////
# MAIN
# ///////////////////////////////////////////////////////////////////

CACHE_DIR="${HOME}/.cache/arch-os"

main() {

    set -Eeo pipefail # Set error handling
    local user_input options user_action selected_action

    # Check dependencies
    if ! command -v /usr/bin/kitty &>/dev/null; then echo "ERROR: kitty not found" >&2 && exit 1; fi
    if ! command -v /usr/bin/gum &>/dev/null; then echo "ERROR: gum not found" >&2 && exit 1; fi
    if ! command -v /usr/bin/notify-send &>/dev/null; then echo "ERROR: notify-send not found" >&2 && exit 1; fi
    if ! command -v /usr/bin/checkupdates &>/dev/null; then echo "ERROR: checkupdates not found" >&2 && exit 1; fi
    if ! command -v /usr/bin/paru &>/dev/null; then echo "ERROR: paru not found" >&2 && exit 1; fi

    # Check and start kitty
    if [ "$1" = '--kitty' ] || [ "$1" = '-k' ]; then
        shift # Shift argument to next
        # Start kitty if not already present
        if [ "$TERM" != "xterm-kitty" ]; then
            kitty "$SELF" "$@" # Open script in kitty instance
            exit 0
        fi
    fi

    # Set Traps
    trap 'trap_error $? ${FUNCNAME} ${LINENO}' ERR # Set error trap
    trap 'trap_exit $?' EXIT                       # Set exit trap

    # Check arguments
    if [ $# -gt 1 ]; then
        print_help && print_fail "Max. 1 argument supported!"
        exit 1
    fi

    # Set user action argument
    if [ -n "$1" ]; then
        case "$1" in
        'check' | 'notify' | 'list' | 'upgrade' | 'orphans' | 'downgrade' | 'reset' | 'help')
            user_action="$1"
            ;;
        *)
            print_help && print_fail "Action '${1}' not available"
            exit 130
            ;;
        esac
    fi

    # Handle user action
    selected_action="$user_action"

    # Show menu or execute user action
    while (true); do
        print_header # Print header
        if [ -z "$selected_action" ]; then
            options=("List Updates" "Upgrade System" "Remove Orphans" "Downgrade Packages" "Reset Keyring" "Open Help" "Quit")
            user_input=$(gum_choose --height=12 --selected="$user_input" "${options[@]}") || exit 130
            case "$user_input" in # Set user action to selected action
            'List Updates') selected_action='list' ;;
            'Upgrade System') selected_action='upgrade' ;;
            'Remove Orphans') selected_action='orphans' ;;
            'Downgrade Packages') selected_action='downgrade' ;;
            'Reset Keyring') selected_action='reset' ;;
            'Open Help') selected_action='help' ;;
            'Quit') exit 130 ;;
            *) print_fail "Action '${user_input}' not available" && exit 130 ;;
            esac
        fi

        # Execute action
        case "$selected_action" in # Execute action
        'check') action_check_updates_available ;;
        'notify') action_check_updates_available && notify "New updates available" ;;
        'list') action_list_updates ;;
        'upgrade') action_upgrade_system ;;
        'orphans') action_remove_orphans ;;
        'downgrade') action_downgrade_pkgs ;;
        'reset') action_reset ;;
        'help') print_help ;;
        *) print_fail "Action '${selected_action}' not available" && exit 130 ;;
        esac
        unset selected_action # Reset selected action
        ! gum_confirm --affirmative "< Back" --negative 'Exit' '' && exit 130
    done
}

# ///////////////////////////////////////////////////////////////////
# TRAPS
# ///////////////////////////////////////////////////////////////////

trap_exit() {
    [ "$1" != "130" ] && gum_confirm --affirmative 'Exit' --negative '' ''
    return "$1"
}
trap_error() {
    [ "$1" != "130" ] && print_fail "${BASH_COMMAND} failed ($1) in function '${2}' (line ${3})"
    return "$1"
}

# ///////////////////////////////////////////////////////////////////
# ACTIONS
# ///////////////////////////////////////////////////////////////////

action_check_updates_available() {
    local update_available="false"
    checkupdates && update_available="true"
    paru -Qua && update_available="true"
    [ "$update_available" = "false" ] && return 1
    return 0
}

action_list_updates() { # List package updates
    print_header && print_title "List Package Updates"
    ! gum_spin --title 'Checking updates...' -- bash -c "checkupdates; paru -Qua; wait; exit 0" && print_warn "Canceled." && return 0 # Preload and return if user press ctrl + c
    ! action_check_updates_available && print_info "Your system is up to date." && return 0
    gum_white '' && ! gum_confirm "Upgrade packages?" && return 0
    echo && action_upgrade_system
    return 0
}

action_upgrade_system() { # Update packages
    print_header && print_title "Upgrade System Packages"
    ! paru -Syu --skipreview && print_fail "Upgrade failed." && return 0
    echo && print_info "Upgrade successful."
    gum_white '' && ! gum_confirm "Remove orphans?" && return 0
    echo && action_remove_orphans
    return 0
}

action_remove_orphans() { # Remove orphaned packages
    print_header && print_title "Remove Orphans"
    # shellcheck disable=SC2046
    paru -Qtdq &>/dev/null && paru -Rns --noconfirm $(paru -Qtdq) 2>/dev/null # Remove orphans
    # shellcheck disable=SC2046
    paru -Rsu --noconfirm $(paru -Qqd) 2>/dev/null                  # Remove more orphans
    command -v flatpak &>/dev/null && flatpak uninstall -y --unused # Remove unused flatpaks
    echo && print_info "Done."
    return 0
}

action_downgrade_pkgs() { # Downgrade packages
    print_header
    if ! command -v /usr/bin/downgrade &>/dev/null; then
        print_title "Install Downgrade"
        ! gum_confirm "Install missing package?" && print_warn "Canceled." && return 0
        paru -S --noconfirm --skipreview downgrade
        print_header # Clean install output & print new header
    fi
    print_title "Downgrade Packages"
    local user_input options
    mapfile -t options < <(pacman -Qqen) # Only packages from official db
    ! user_input=$(gum_filter --limit 100 --height 15 "${options[@]}") && print_warn "Canceled." && return 0
    [ -z "$user_input" ] && print_warn "No package selected." && return 0
    mapfile -t user_input <<<"$user_input" # Convert string to array
    for item in "${user_input[@]}"; do gum_green "• ${item}"; done
    gum_white '' && ! gum_confirm "Downgrade selected packages?" && echo && print_warn "Canceled." && return 0
    echo && sudo downgrade "${user_input[@]}"
    echo && print_info "Downgrade successful."
    return 0
}

action_reset() { # Keyring reset (if update failed, try to reset & reinit keyring)
    print_header && print_title "Reset Arch Keyring"
    ! gum_confirm "Are you sure?" && print_warn "Canceled." && return 0
    # Keyring reset
    sudo rm -rf /etc/pacman.d/gnupg
    sudo pacman-key --init
    sudo pacman-key --populate
    # Update Arch keyring & system
    paru -Sy --noconfirm archlinux-keyring && paru -Su --skipreview
    echo && print_info "Done."
    return 0
}

# ///////////////////////////////////////////////////////////////////
# PRINT
# ///////////////////////////////////////////////////////////////////

# https://github.com/muesli/termenv?tab=readme-ov-file#color-chart
COLOR_WHITE=7
COLOR_GREEN=2
COLOR_PURPLE=212
COLOR_YELLOW=3
COLOR_RED=1

print_header() {
    local header_logo header_title header_container
    header_logo='
 █████  ██████   ██████ ██   ██      ██████  ███████ 
██   ██ ██   ██ ██      ██   ██     ██    ██ ██      
███████ ██████  ██      ███████     ██    ██ ███████ 
██   ██ ██   ██ ██      ██   ██     ██    ██      ██ 
██   ██ ██   ██  ██████ ██   ██      ██████  ███████
    ' && header_logo=$(gum_purple "$header_logo")
    header_title="System Manager ${VERSION}" && header_title=$(gum_white --bold "$header_title")
    header_container=$(gum_join --vertical "$header_logo" "$header_title")
    clear && gum_style --width 89 --align center --margin '0 0' "$header_container" && echo
}

print_help() {
    print_header && print_title "Actions"
    gum_white 'arch-os [--kitty | -k] help       Open help page'
    gum_white 'arch-os [--kitty | -k] list       List package updates'
    gum_white 'arch-os [--kitty | -k] upgrade    Execute system upgrade'
    gum_white 'arch-os [--kitty | -k] orphans    Remove orphaned packages'
    gum_white 'arch-os [--kitty | -k] downgrade  Downgrade packages'
    gum_white 'arch-os [--kitty | -k] reset      Reset keyring'
    gum_white 'arch-os [--kitty | -k] check      Check and print package updates'
    gum_white 'arch-os [--kitty | -k] notify     Check, print and notify package updates'

    gum_white '' && print_title 'Examples'
    gum_white 'arch-os                           Open menu (Default)'
    gum_white 'arch-os --kitty                   Open menu in kitty'
    gum_white 'arch-os list                      List updates'
    gum_white 'arch-os -k list                   List updates in kitty'
}

gum() { /usr/bin/gum "$@"; }

gum_space() { echo '               '; } # Spaces till header
gum_white() { gum_style --foreground "$COLOR_WHITE" "${@}"; }
gum_green() { gum_style --foreground "$COLOR_GREEN" "${@}"; }
gum_purple() { gum_style --foreground "$COLOR_PURPLE" "${@}"; }
gum_yellow() { gum_style --foreground "$COLOR_YELLOW" "${@}"; }
gum_red() { gum_style --foreground "$COLOR_RED" "${@}"; }

gum_filter() { gum filter --width=80 --prompt "> " --indicator "> " --placeholder "Type to filter and toggle with CTRL + Space ..." --header.foreground "$COLOR_PURPLE" "${@}"; }
gum_choose() { gum choose --no-show-help --header="" --cursor "$(gum_space) • " "${@}"; }
gum_confirm() { gum confirm --no-show-help --prompt.foreground "$COLOR_PURPLE" "$@"; }
gum_style() { gum style "${@}"; }
gum_join() { gum join "${@}"; }
gum_spin() { gum spin --spinner dot "${@}"; }

print_title() { gum_purple --bold "${*}" && echo; }
print_info() { gum_green "${*}"; }
print_warn() { gum_yellow "${*}"; }
print_fail() { echo && gum_red --bold "ERROR: ${*}"; }

notify() { notify-send --app-name "Arch OS" -i "${WORKING_DIR}/docs/logo.svg" "Arch OS" "$@"; }

# ///////////////////////////////////////////////////////////////////
# KITTY
# ///////////////////////////////////////////////////////////////////

kitty() {
    mkdir -p "$CACHE_DIR" && echo "$KITTY_CONF" >"${CACHE_DIR}/kitty.conf"
    /usr/bin/kitty --detach --class "arch-os" --name "Arch OS" -c "${CACHE_DIR}/kitty.conf" "$@"
}

# https://sw.kovidgoyal.net/kitty/conf/
KITTY_CONF='
hide_window_decorations yes
remember_window_size false
initial_window_width 800
initial_window_height 600
placement_strategy center
window_padding_width 32
font_family Fira Code Nerd Font
font_size 10.0
active_tab_font_style bold
inactive_tab_font_style normal
foreground              #D8DEE9
background              #2E3440
selection_foreground    #3B4252
selection_background    #EBCB8B
active_tab_foreground   #2E3440
active_tab_background   #A3BE8C
inactive_tab_foreground #2E3440
inactive_tab_background #4C566A
cursor                  #D8DEE9
url_color               #81A1C1
color0                  #3B4252
color8                  #4C566A
color1                  #BF616A
color9                  #BF616A
color2                  #A3BE8C
color10                 #A3BE8C
color3                  #EBCB8B
color11                 #EBCB8B
color4                  #81A1C1
color12                 #81A1C1
color5                  #B48EAD
color13                 #B48EAD
color6                  #88C0D0
color14                 #88C0D0
color7                  #E5E9F0
color15                 #E5E9F0
'

# ///////////////////////////////////////////////////////////////////
# START SCRIPT
# ///////////////////////////////////////////////////////////////////

# Locating working dir
WORKING_SOURCE=${BASH_SOURCE[0]}
while [ -L "$WORKING_SOURCE" ]; do
    WORKING_DIR=$(cd -P "$(dirname "$WORKING_SOURCE")" >/dev/null 2>&1 && pwd)
    WORKING_SOURCE=$(readlink "$WORKING_SOURCE")
    [[ $WORKING_SOURCE != /* ]] && WORKING_SOURCE=$WORKING_DIR/$WORKING_SOURCE
done
WORKING_DIR=$(cd -P "$(dirname "$WORKING_SOURCE")" >/dev/null 2>&1 && pwd)
SELF="$WORKING_DIR/$(basename "$0")"

main "$@" # Start main function
